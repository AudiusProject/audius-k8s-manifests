#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys

import yaml


def load_multi_yaml(contents):
    """Loads a kubernetes yaml config"""
    return [yaml.safe_load(i) for i in contents.split("---")[1:]]


def dump_multi_yaml(data, filename):
    """Dumps a kubernetes yaml config"""
    with open(filename, "w") as file:
        file.write("---\n" + "---\n".join(yaml.dump(i) for i in data))


def backup(filename, manifests_path):
    """Writes changed options to given filename"""
    output = {}

    for service in ["creator-node", "discovery-provider"]:
        output[service] = {}

        rel_config_map = f"{manifests_path}/audius/{service}/{service}-cm.yaml"
        abs_config_map = f"audius/{service}/{service}-cm.yaml"

        proc = subprocess.run(
            f"git --git-dir {manifests_path}/.git show HEAD:{abs_config_map}",
            capture_output=True,
            shell=True,
            check=True,
        )

        def_config = {
            conf["metadata"]["name"]: conf["data"]
            for conf in load_multi_yaml(proc.stdout.decode("utf-8"))
        }
        new_config = {
            conf["metadata"]["name"]: conf["data"]
            for conf in load_multi_yaml(open(rel_config_map).read())
        }

        for cm in new_config:
            output[service][cm] = {}
            if cm not in def_config:
                output[service][cm] = new_config[cm]
                continue

            for key in {*new_config[cm].keys(), *def_config[cm].keys()}:
                if key in new_config[cm] and key not in def_config[cm]:
                    output[service][cm][key] = new_config[cm][key]
                elif key not in new_config[cm] and key in def_config[cm]:
                    output[service][cm][key] = ""
                elif new_config[cm][key] != def_config[cm][key]:
                    output[service][cm][key] = new_config[cm][key]

    open(filename, "w").write(yaml.dump(output))


def check_config_map(filename):
    """Checks if configs have unset values"""
    failed = False

    for config in load_multi_yaml(open(filename).read()):
        unset_keys = [
            key
            for key, value in config["data"].items()
            if value in ("", "<SEE_README>")
        ]
        if unset_keys:
            print(
                f"Keys {', '.join(unset_keys)} are unset in {config['metadata']['name']}",
                file=sys.stderr,
            )
            failed = True

    return failed


def launch_pod(service, pod, deploy, seed_job, manifests_path):
    """Launch a pod"""
    if service == "creator-node" and (deploy or seed_job):
        print(
            "deploy and seed_job can only be used with discovery-provider",
            file=sys.stderr,
        )
        sys.exit(1)

    subprocess.run(
        (
            f"git --git-dir {manifests_path}/.git checkout -- {manifests_path}/audius/discovery-provider/discovery-provider-cm.yaml &&"
            f"git --git-dir {manifests_path}/.git checkout -- {manifests_path}/audius/creator-node/creator-node-cm.yaml"
        ),
        shell=True,
        check=True,
    )

    apply_config(manifests_path)

    check_failed = check_config_map(
        f"{manifests_path}/audius/{service}/{service}-cm.yaml"
    )
    if check_failed:
        inp = input("There are some unset keys in your config continue? [y/N]")
        if not inp.lower().startswith("y"):
            sys.exit(1)

    if service == "creator-node":
        subprocess.run(
            (
                f"kubectl apply -f {manifests_path}/audius/creator-node/creator-node-svc.yaml &&"
                f"kubectl apply -f {manifests_path}/audius/creator-node/creator-node-pvc.yaml &&"
                f"kubectl apply -f {manifests_path}/audius/creator-node/creator-node-deploy-ipfs.yaml &&"
                f"kubectl apply -f {manifests_path}/audius/creator-node/creator-node-cm.yaml &&"
                f"kubectl apply -f {manifests_path}/audius/creator-node/creator-node-deploy-backend.yaml"
            ),
            shell=True,
            check=True,
        )
    elif service == "discovery-provider":
        subprocess.run(
            (
                f"kubectl apply -f {manifests_path}/audius/discovery-provider/discovery-provider-cm.yaml &&"
                f"kubectl apply -f {manifests_path}/audius/discovery-provider/discovery-provider-svc.yaml &&"
                f"kubectl apply -f {manifests_path}/audius/discovery-provider/discovery-provider-pvc.yaml"
            ),
            shell=True,
            check=True,
        )

        if seed_job:
            subprocess.run(
                (
                    f"kubectl apply -f {manifests_path}/audius/discovery-provider/discovery-provider-deploy-no-workers.yaml &&"
                    f"kubectl apply -f {manifests_path}/audius/discovery-provider/discovery-provider-db-seed-job.yaml &&"
                    "kubectl wait --for=condition=complete job/discovery-provider-db-seed-job --timeout=-1s"
                ),
                shell=True,
                check=True,
            )
        if deploy:
            print("Waiting for seed job completion if running...")
            subprocess.run(
                (
                    "kubectl wait --for=condition=complete job/discovery-provider-db-seed-job --timeout=-1s &&"
                    f"kubectl apply -f {manifests_path}/audius/discovery-provider/discovery-provider-deploy.yaml"
                ),
                shell=True,
                check=True,
            )

    if pod:
        subprocess.run(f"kubectl delete pods -l tier={pod}", shell=True, check=True)


def pull(manifests_path):
    """Git pull"""
    subprocess.run(
        (
            f"git --git-dir {manifests_path}/.git checkout -- audius/discovery-provider/discovery-provider-cm.yaml &&"
            f"git --git-dir {manifests_path}/.git checkout -- audius/creator-node/creator-node-cm.yaml"
        ),
        shell=True,
        check=True,
    )

    print("Pulling changes")
    subprocess.run(f"git --git-dir {manifests_path}/.git pull", shell=True, check=True)

    apply_config(manifests_path)


def set_config(service, pod, key, value, manifests_path):
    """Set config option for a pod"""
    config_file = f"{manifests_path}/config.yaml"
    with open(config_file, "a") as f:
        f.write("")

    data = yaml.safe_load(open(config_file, "r").read()) or {}
    data[service] = data[service] if service in data else {}
    data[service][pod] = data[service][pod] if pod in data[service] else {}
    data[service][pod][key] = value

    open(config_file, "w").write(yaml.dump(data))


def apply_config(manifests_path):
    """Apply config from MANIFESTS_PATH/config.yaml generated by backup()"""
    config_file = f"{manifests_path}/config.yaml"
    with open(config_file, "a") as f:
        f.write("")
    config = yaml.safe_load(open(config_file, "r").read()) or {}

    for service in config:
        cm_filename = f"{manifests_path}/audius/{service}/{service}-cm.yaml"
        output = load_multi_yaml(open(cm_filename, "r").read())

        m = {pod["metadata"]["name"]: i for i, pod in enumerate(output)}

        for pod in config[service]:
            for key in config[service][pod]:
                output[m[f"{service}-{pod}-cm"]]["data"][key] = config[service][pod][
                    key
                ]

        dump_multi_yaml(output, cm_filename)


def config_ipfs(hostname):
    subprocess.run(
        f'k exec -it $(k get pods -l tier=ipfs -o json | jq -r \'.items | first.metadata.name\') -- ipfs config --json Addresses.Announce "[\\"/ip4/{hostname}/tcp/$(kubectl get svc -o json | jq \'.items | map(select(.metadata.name | contains("ipfs")).spec.ports) | flatten | map(select(.port == 4001)) | first.nodePort\')\\"]"',
        shell=True,
        check=True,
    )


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-m",
        "--manifests-path",
        default=os.getenv(
            "MANIFESTS_PATH", os.path.expanduser("~/audius-k8s-manifests")
        ),
        help="Path to audius-k8s-manifests",
    )

    subparser = parser.add_subparsers(required=True, dest="operation")

    parser_check = subparser.add_parser(
        "check", help="Check configs (creator-node or discovery-provider)"
    )
    parser_check.add_argument(
        "service",
        metavar="service",
        choices=["creator-node", "discovery-provider"],
        help="The sevice to check config for (creator-node or discovery-provider)",
    )

    parser_launch = subparser.add_parser("launch", help="Launch a pod")
    parser_launch.add_argument(
        "-d",
        "--deploy",
        action="store_true",
        help="If set discovery-provider is deployed",
    )
    parser_launch.add_argument(
        "-s",
        "--seed-job",
        action="store_true",
        help="If set seed job is run when launching discovery-provider",
    )
    parser_launch.add_argument(
        "service",
        metavar="service",
        choices=["creator-node", "discovery-provider"],
        help="The service to launch (creator-node or discovery-provider)",
    )
    parser_launch.add_argument(
        "pod",
        nargs="?",
        help="If provided then launch only given pod (backend, ipfs, etc.)",
    )

    subparser.add_parser(
        "pull", help="Pulls from source and updates audius-k8s-manifests"
    )
    parser_set = subparser.add_parser("set", help="Set a config option")
    parser_set.add_argument(
        "service",
        metavar="service",
        choices=["creator-node", "discovery-provider"],
        help="The service to set a config value for (creator-node or discovery-provider)",
    )
    parser_set.add_argument(
        "pod", help="The pod to set a config value for (backend, db, etc.)"
    )
    parser_set.add_argument("key", help="The config key to set")
    parser_set.add_argument(
        "value", help="The new config value for the given config key"
    )

    parser_ipfs = subparser.add_parser(
        "ipfs", help="Finishes configuration of ipfs hostname"
    )
    parser_ipfs.add_argument("hostname", help="The IPFS hostname endpoint")

    args = parser.parse_args()

    if args.operation == "check":
        sys.exit(
            check_config_map(
                f"{args.manifests_path}/audius/{args.service}/{args.service}-cm.yaml"
            )
        )
    elif args.operation == "launch":
        launch_pod(
            args.service, args.pod, args.deploy, args.seed_job, args.manifests_path
        )
    elif args.operation == "pull":
        pull(args.manifests_path)
    elif args.operation == "set":
        set_config(args.service, args.pod, args.key, args.value, args.manifests_path)
        apply_config(args.manifests_path)
    elif args.operation == "ipfs":
        config_ipfs(args.hostname)


if __name__ == "__main__":
    main()
