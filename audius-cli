#!/usr/bin/env python3

import argparse
import json
import os
import urllib.request
import subprocess
import sys

import yaml


def _apply_config(manifests_path):
    config_file = os.path.join(manifests_path, "config.yaml")

    if not os.path.isfile(config_file):
        return

    with open(config_file, "r") as stream:
        config = yaml.safe_load(stream) or {}

    for service, pods in config.items():
        config_map = os.path.join(manifests_path, f"audius/{service}/{service}-cm.yaml")
        with open(config_map, "r") as stream:
            config_map_data = list(yaml.safe_load_all(stream))
        config_map_names = [i["metadata"]["name"] for i in config_map_data]

        for pod, changes in pods.items():
            if f"{service}-{pod}-cm" not in config_map_names:
                continue

            idx = config_map_names.index(f"{service}-{pod}-cm")
            for key, value in changes.items():
                config_map_data[idx]["data"][key] = value

        with open(config_map, "w") as stream:
            yaml.safe_dump_all(config_map_data, stream, explicit_start=True)


def _get_unset_keys(service, manifests_path):
    config_map_filename = os.path.join(
        manifests_path, f"audius/{service}/{service}-cm.yaml"
    )

    all_unset_keys = {}
    with open(config_map_filename, "r") as stream:
        for config_map in yaml.safe_load_all(stream):
            unset_keys = []
            for key, value in config_map["data"].items():
                if value in ["", "<SEE_README>"]:
                    unset_keys.append(key)
            if unset_keys:
                all_unset_keys[config_map["metadata"]["name"]] = unset_keys

    return all_unset_keys


def _is_creator_node_healthy(health_check_resp):
    return health_check_resp["healthy"]


def _is_discovery_provider_healthy(health_check_resp):
    return (
        health_check_resp["block_difference"]
        < health_check_resp["data"]["maximum_healthy_block_difference"]
    )


def _kubectl_apply(service, manifest, manifests_path):
    subprocess.run(
        [
            "kubectl",
            "apply",
            "-f",
            os.path.join(manifests_path, f"audius/{service}/{service}-{manifest}.yaml"),
        ]
    )


def _kubectl_diff(service, manifest, manifests_path):
    return subprocess.run(
        [
            "kubectl",
            "diff",
            "-f",
            os.path.join(manifests_path, f"audius/{service}/{service}-{manifest}.yaml"),
        ],
        capture_output=True,
    ).returncode


def _kubectl_get_svc():
    return json.loads(
        subprocess.run(
            ["kubectl", "get", "svc", "-o", "json"],
            capture_output=True,
        ).stdout
    )


def _kubectl_wait_seed_job():
    subprocess.run(
        [
            "kubectl",
            "wait",
            "--for=condition=complete",
            "--timeout=-1s",
            "job/discovery-provider-db-seed-job",
        ]
    )


def check_config(service, manifests_path):
    unset_keys = _get_unset_keys(service, manifests_path)
    if unset_keys:
        for config_map, unset in unset_keys.items():
            print(f"{config_map} has unset keys: {', '.join(unset)}")
        sys.exit(1)


def configure_ipfs(hostname):
    subprocess.run(
        f'kubectl exec -it $(kubectl get pods -l tier=ipfs -o json | jq -r \'.items | first.metadata.name\') -- ipfs config --json Addresses.Announce "[\\"/ip4/{hostname}/tcp/$(kubectl get svc -o json | jq \'.items | map(select(.metadata.name | contains("ipfs")).spec.ports) | flatten | map(select(.port == 4001)) | first.nodePort\')\\"]"',
        shell=True,
        check=True,
    )
    subprocess.run(
        f"kubectl delete pod $(kubectl get pods -l tier=ipfs -o json | jq -r '.items | first.metadata.name')",
        shell=True,
        check=True,
    )


def health_check(service):
    service_running = False

    for item in _kubectl_get_svc()["items"]:
        if item["metadata"]["name"] == f"{service}-backend-svc":
            service_running = True
            port = item["spec"]["ports"][0]["nodePort"]
            url = f"http://localhost:{port}/health_check"

            try:
                resp = json.loads(urllib.request.urlopen(url))
                healthy = False
                if service == "creator-node":
                    healthy = _is_creator_node_healthy(resp)
                elif service == "discovery-provider":
                    healthy = _is_discovery_provider_healthy(resp)
            except urllib.error.HTTPError:
                healthy = False

            print("Reponse: ")
            print(json.dumps(resp, sort_keys=True, indent=4))
            print()
            print(f"{service} is {'healthy' if healthy else 'not healthy'}")

    if not service_running:
        print(
            f"Provided service ({service}) does not seem to be running", file=sys.stderr
        )
        sys.exit(1)


def launch(service, seed_job, manifests_path):
    unset_keys = _get_unset_keys(service, manifests_path)
    if unset_keys:
        for config_map, unset in unset_keys.items():
            print(f"{config_map} has unset keys: {', '.join(unset)}", file=sys.stderr)
        if not input("Do you want to continue? [y/N] ").lower().startswith("y"):
            sys.exit(1)

    if service == "creator-node":
        if seed_job:
            print(
                "The -s and --seed-job are not supported with launching creator-node",
                file=sys.stderr,
            )

        cm_upd = _kubectl_diff("creator-node", "cm", manifests_path)
        backend_upd = _kubectl_diff("creator-node", "backend", manifests_path)

        _kubectl_apply("creator-node", "svc", manifests_path)
        _kubectl_apply("creator-node", "pvc", manifests_path)
        _kubectl_apply("creator-node", "deploy-ipfs", manifests_path)
        _kubectl_apply("creator-node", "cm", manifests_path)
        _kubectl_apply("creator-node", "backend", manifests_path)

        # If config map is updated but backend is not then restart backend
        if cm_upd and (not backend_upd):
            print("Restarting backend")
            subprocess.run(["kubectl", "delete", "pods", "-l", "tier=backend"])
    elif service == "discovery-provider":
        cm_upd = _kubectl_diff("discovery-provider", "cm", manifests_path)
        backend_upd = _kubectl_diff("discovery-provider", "deploy", manifests_path)

        _kubectl_apply("discovery-provider", "cm", manifests_path)
        _kubectl_apply("discovery-provider", "svc", manifests_path)
        _kubectl_apply("discovery-provider", "pvc", manifests_path)

        if seed_job:
            _kubectl_apply("discovery-provider", "deploy-no-workers", manifests_path)
            _kubectl_apply("discovery-provider", "db-seed-job", manifests_path)

        print("Waiting for seed job to complete if running this might take a while")
        _kubectl_wait_seed_job()

        _kubectl_apply("discovery-provider", "deploy", manifests_path)

        # If config map is updated but backend is not then restart backend
        if cm_upd and (not backend_upd):
            print("Restarting backend")
            subprocess.run(["kubectl", "delete", "pods", "-l", "tier=backend"])


def set_config(service, pod, key, value, manifests_path):
    config_file = os.path.join(manifests_path, "config.yaml")

    config = {}
    if os.path.isfile(config_file):
        with open(config_file, "r") as stream:
            config = yaml.safe_load(stream) or {}

    config[service] = config[service] if service in config else {}
    config[service][pod] = config[service][pod] if pod in config[service] else {}
    config[service][pod][key] = value

    with open(config_file, "w") as stream:
        yaml.safe_dump(config, stream)

    print("Updating config maps")
    _apply_config(manifests_path)


def upgrade(launch, manifests_path):
    for file in [
        "audius/creator-node/creator-node-cm.yaml",
        "audius/discovery-provider/discovery-provider-cm.yaml",
    ]:
        print(f"Reverting {file}")
        proc = subprocess.run(["git", "checkout", "--", file], cwd=manifests_path)
        if proc.returncode != 0:
            print(f"Unable to revert {file}", file=sys.stderr)
            sys.exit(1)

    print("Pulling changes from source")
    proc = subprocess.run(["git", "pull"], cwd=manifests_path)
    if proc.returncode != 0:
        print("Unable to pull changes from source", file=sys.stderr)
        sys.exit(1)

    print("Updating config maps")
    _apply_config(manifests_path)

    if launch:
        svc = [item["metadata"]["name"] for item in _kubectl_get_svc()["items"]]

        if "creator-node-backend-svc" in svc:
            print("Upgrading creator-node...")
            launch("creator-node", False, manifests_path)
        if "discovery-provider-backend-svc" in svc:
            print("Upgrading discovery-provider...")
            launch("discovery-provider", False, manifests_path)


def main():
    parser = argparse.ArgumentParser(
        description="A cli tool to manage creator-node and discovery-provider"
    )

    parser.add_argument(
        "-m",
        "--manifests-path",
        default=os.getenv(
            "MANIFESTS_PATH", os.path.expanduser("~/audius-k8s-manifests")
        ),
        help="Path to audius-k8s-manifests, if not specified, the value of the MANIFESTS_PATH environment variable, or ~/audius-k8s-manifests if neither is specified.",
    )

    subparser = parser.add_subparsers(
        title="operations",
        dest="operation",
        required=True,
    )

    # check subcomamnd parser
    parser_check_config = subparser.add_parser(
        "check-config",
        help="Checks that there are no unset keys in config maps",
    )

    parser_check_config.add_argument(
        "service",
        metavar="service",
        choices=["creator-node", "discovery-provider"],
        help="The sevice to check config for (creator-node or discovery-provider)",
    )

    # configure-ipfs subcomamnd parser
    parser_configure_ipfs = subparser.add_parser(
        "configure-ipfs",
        help="Finishes configuration of ipfs hostname",
    )

    parser_configure_ipfs.add_argument(
        "hostname",
        help="The hostname to use when configuring ipfs",
    )

    # health-check subcommand parser
    parser_health_check = subparser.add_parser(
        "health-check",
        help="Run health checks",
    )

    parser_health_check.add_argument(
        "service",
        metavar="service",
        choices=["creator-node", "discovery-provider"],
        help="Service to run health checks for (creator-node or discovery-provider)",
    )

    # launch subcomamnd parser
    parser_launch = subparser.add_parser(
        "launch",
        help="Launch provided service",
    )

    parser_launch.add_argument(
        "-s",
        "--seed-job",
        action="store_true",
        help="Run seed job when launcing discovery-provider",
    )

    parser_launch.add_argument(
        "service",
        metavar="service",
        choices=["creator-node", "discovery-provider"],
        help="The service to launch (creator-node or discovery-provider)",
    )

    # set-config subcomamnd parser
    parser_set_config = subparser.add_parser(
        "set-config",
        help="Set a config option",
    )

    parser_set_config.add_argument(
        "service",
        metavar="service",
        choices=["creator-node", "discovery-provider"],
        help="The service to set a config value for (creator-node or discovery-provider)",
    )

    parser_set_config.add_argument(
        "pod",
        help="The pod to set a config value for (backend, db, etc.)",
    )

    parser_set_config.add_argument(
        "key",
        help="The config key to set",
    )

    parser_set_config.add_argument(
        "value",
        help="The config value to set for given config key",
    )

    # upgrade subcomamnd parser
    parser_upgrade = subparser.add_parser(
        "upgrade",
        help="Pulls from source and updates audius-k8s-manifests",
    )

    parser_upgrade.add_argument(
        "-l",
        "--launch",
        action="store_true",
        help="Relaunches running services after pulling from sources",
    )

    args = parser.parse_args()

    if not os.path.isdir(args.manifests_path):
        print(
            f"Provided manifests-path ({args.manifests_path}) does not exist\n"
            "You can set manifests-path by doing export MANIFESTS_PATH=<manifests_path>",
            file=sys.stderr,
        )
        sys.exit(1)
    if not os.path.isdir(os.path.join(args.manifests_path, ".git")):
        print(
            f"Provided manifests-path ({args.manifests_path}) is not a git repository\n"
            "You can set manifests-path by doing export MANIFESTS_PATH=<manifests_path>",
            file=sys.stderr,
        )
        sys.exit(1)

    args.manifests_path = os.path.abspath(args.manifests_path)

    if args.operation == "check-config":
        check_config(
            args.service,
            args.manifests_path,
        )
    elif args.operation == "configure-ipfs":
        configure_ipfs(
            args.hostname,
        )
    elif args.operation == "health-check":
        health_check(
            args.service,
        )
    elif args.operation == "launch":
        launch(
            args.service,
            args.seed_job,
            args.manifests_path,
        )
    elif args.operation == "set-config":
        set_config(
            args.service,
            args.pod,
            args.key,
            args.value,
            args.manifests_path,
        )
    elif args.operation == "upgrade":
        upgrade(
            args.launch,
            args.manifests_path,
        )


if __name__ == "__main__":
    main()
